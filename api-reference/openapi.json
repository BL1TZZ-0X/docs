{
  "openapi": "3.1.0",
  "info": {
    "title": "Pump API",
    "version": "0.1.0",
    "description": "HTTP API for building and sending Pump Fun and Pump AMM transactions on Solana."
  },
  "servers": [
    {
      "url": "http://localhost:80",
      "description": "HTTP API"
    },
    {
      "url": "ws://localhost:8099",
      "description": "WebSocket stream"
    }
  ],
  "paths": {
    "/local-trade": {
      "post": {
        "summary": "Build an unsigned transaction",
        "description": "Returns a base64-encoded unsigned transaction for the client to sign and send. Set pool to \"pump\", \"pump-amm\", or \"auto\". For \"create\", provide metadata.",
        "operationId": "localTrade",
        "tags": [
          "Trade"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalTradeRequest"
              },
              "examples": {
                "buy-pump": {
                  "summary": "Buy on Pump Fun",
                  "value": {
                    "type": "buy",
                    "pool": "pump",
                    "mint": "8x...Mint",
                    "payer": "7y...Payer",
                    "amount": 10000000,
                    "slippage_pct": 0.5,
                    "prioFee": 0.0005
                  }
                },
                "sell-amm": {
                  "summary": "Sell on Pump AMM",
                  "value": {
                    "type": "sell",
                    "pool": "pump-amm",
                    "mint": "8x...Mint",
                    "payer": "7y...Payer",
                    "amount": 250000000,
                    "slippage_pct": 0.5,
                    "prioFee": 0.0005
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unsigned transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalTradeResponse"
                },
                "examples": {
                  "ok": {
                    "value": {
                      "tx": "AQABAA..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found (e.g., token/pool not found)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Blockhash unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/blitzz": {
      "post": {
        "summary": "Build, sign, and send a transaction",
        "description": "Signs using the provided privateKey, sends via RPC, then waits up to 15s for the Yellowstone stream to observe the signature.",
        "operationId": "blitzz",
        "tags": [
          "Trade"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlitzTradeRequest"
              },
              "examples": {
                "buy-auto": {
                  "summary": "Auto-buy (prefers AMM if present)",
                  "value": {
                    "type": "buy",
                    "pool": "auto",
                    "mint": "8x...Mint",
                    "amount": 10000000,
                    "slippage_pct": 0.5,
                    "prioFee": 0.0005,
                    "privateKey": "{{PRIVATE_KEY}}"
                  }
                },
                "create": {
                  "summary": "Create token (optional initial buy if amount > 0)",
                  "value": {
                    "type": "create",
                    "pool": "pump",
                    "amount": 10000000,
                    "slippage_pct": 0.5,
                    "prioFee": 0.0005,
                    "metadata": {
                      "name": "My Token",
                      "symbol": "MYT",
                      "uri": "https://example.com/meta.json"
                    },
                    "privateKey": "{{PRIVATE_KEY}}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlitzTradeResponse"
                },
                "examples": {
                  "ok": {
                    "value": {
                      "status": "success",
                      "signature": "5j...sig"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "sendTransaction failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Timed out waiting for signature",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "WebSocket upgrade",
        "description": "Connect to ws://localhost:8099/. After upgrade, send WsRequest frames. Server responds with WsResponse (acks) and WsEvent (streamed trades/creates/migrations). Limits: max 2 connections per IP. Timeout: connection closes if no filter set within 10 seconds.",
        "operationId": "websocketUpgrade",
        "tags": [
          "WebSocket"
        ],
        "responses": {
          "101": {
            "description": "Switching Protocols. After upgrade, client sends WsRequest and receives WsResponse and WsEvent JSON messages."
          },
          "429": {
            "description": "Too Many Requests (max 2 connections per IP)."
          },
          "400": {
            "description": "Bad handshake/request."
          }
        },
        "x-websocket": {
          "send": {
            "$ref": "#/components/schemas/WsRequest"
          },
          "receive": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/WsResponse"
              },
              {
                "$ref": "#/components/schemas/WsEvent"
              }
            ]
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "MetadataBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "uri": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "name",
          "symbol",
          "uri"
        ]
      },
      "TransferConfig": {
        "type": "object",
        "properties": {
          "pubkey": {
            "type": "string",
            "description": "Base58 recipient"
          },
          "lamports": {
            "type": "string",
            "description": "Lamports as string"
          }
        },
        "required": [
          "pubkey",
          "lamports"
        ]
      },
      "LocalTradeRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "buy",
              "sell",
              "create",
              "claimCreatorFees"
            ]
          },
          "mint": {
            "type": "string",
            "description": "Base58 token mint (required for buy/sell)"
          },
          "payer": {
            "type": "string",
            "description": "Base58 fee payer (required for local-trade buy/sell/create)"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "Lamports for buy/create; token base units for sell"
          },
          "slippage_pct": {
            "type": "number",
            "format": "double",
            "description": "e.g. 0.5 = 0.5%"
          },
          "prioFee": {
            "type": "number",
            "format": "double",
            "description": "Priority fee input used to compute CU price (in SOL)"
          },
          "pool": {
            "type": "string",
            "enum": [
              "pump",
              "pump-amm",
              "auto"
            ],
            "description": "Target venue"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataBody"
          },
          "creator": {
            "type": "string",
            "description": "Creator pubkey for claimCreatorFees (defaults to payer if omitted)"
          },
          "transferConfig": {
            "$ref": "#/components/schemas/TransferConfig"
          }
        },
        "required": [
          "type",
          "prioFee"
        ],
        "description": "Conditional requirements:\n- buy/sell: mint, payer, amount required\n- create: metadata, payer required (amount optional for initial buy)\n- claimCreatorFees: creator or payer required"
      },
      "LocalTradeResponse": {
        "type": "object",
        "properties": {
          "tx": {
            "type": "string",
            "description": "Base64-encoded unsigned transaction"
          }
        },
        "required": [
          "tx"
        ]
      },
      "BlitzTradeRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LocalTradeRequest"
          },
          {
            "type": "object",
            "properties": {
              "privateKey": {
                "type": "string",
                "description": "User's private key (signs server-side)"
              }
            },
            "required": [
              "privateKey"
            ]
          }
        ],
        "description": "For blitzz, payer is derived from privateKey."
      },
      "BlitzTradeResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ]
          },
          "signature": {
            "type": "string",
            "description": "Base58 transaction signature"
          }
        },
        "required": [
          "status",
          "signature"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "required": [
          "error"
        ]
      },
      "WsRequest": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "method": { "const": "subscribeFilterMint" },
              "pubkeys": { "type": "array", "items": { "type": "string" } }
            },
            "required": [ "method", "pubkeys" ]
          },
          {
            "type": "object",
            "properties": {
              "method": { "const": "unsubscribeFilterMint" },
              "pubkeys": { "type": "array", "items": { "type": "string" } }
            },
            "required": [ "method", "pubkeys" ]
          },
          {
            "type": "object",
            "properties": {
              "method": { "const": "subscribeFilterAccount" },
              "pubkeys": { "type": "array", "items": { "type": "string" } }
            },
            "required": [ "method", "pubkeys" ]
          },
          {
            "type": "object",
            "properties": {
              "method": { "const": "unsubscribeFilterAccount" },
              "pubkeys": { "type": "array", "items": { "type": "string" } }
            },
            "required": [ "method", "pubkeys" ]
          },
          {
            "type": "object",
            "properties": {
              "method": { "const": "subscribeNewCreation" }
            },
            "required": [ "method" ]
          },
          {
            "type": "object",
            "properties": {
              "method": { "const": "unsubscribeNewCreation" }
            },
            "required": [ "method" ]
          },
          {
            "type": "object",
            "properties": {
              "method": { "const": "subscribeMigrations" }
            },
            "required": [ "method" ]
          },
          {
            "type": "object",
            "properties": {
              "method": { "const": "unsubscribeMigrations" }
            },
            "required": [ "method" ]
          }
        ],
        "discriminator": {
          "propertyName": "method"
        },
        "description": "Client messages to manage filters. Must send at least one subscription within 10 seconds."
      },
      "WsResponse": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": { "const": "subscribed" },
              "method": { "type": "string" },
              "count": { "type": "integer" },
              "total": { "type": "integer" },
              "message": { "type": "string" }
            },
            "required": [ "type", "method", "count", "total", "message" ]
          },
          {
            "type": "object",
            "properties": {
              "type": { "const": "unsubscribed" },
              "method": { "type": "string" },
              "count": { "type": "integer" },
              "remaining": { "type": "integer" },
              "message": { "type": "string" }
            },
            "required": [ "type", "method", "count", "remaining", "message" ]
          },
          {
            "type": "object",
            "properties": {
              "type": { "const": "error" },
              "method": { "type": "string" },
              "error": { "type": "string" }
            },
            "required": [ "type", "method", "error" ]
          }
        ],
        "discriminator": {
          "propertyName": "type"
        },
        "description": "Acknowledgements for subscribe/unsubscribe requests, or errors."
      },
      "WsEventPumpFunTrade": {
        "type": "object",
        "properties": {
          "signature": { "type": "string" },
          "mint": { "type": "string" },
          "traderPublicKey": { "type": "string" },
          "txType": { "type": "string", "enum": ["buy", "sell"] },
          "tokenAmount": { "type": "number", "format": "double" },
          "solAmount": { "type": "number", "format": "double" },
          "virtualSolReserves": { "type": "integer", "format": "int64" },
          "virtualTokenReserves": { "type": "integer", "format": "int64" },
          "pool": { "type": "string", "enum": ["pump"] }
        },
        "required": [
          "signature",
          "mint",
          "traderPublicKey",
          "txType",
          "tokenAmount",
          "solAmount",
          "virtualSolReserves",
          "virtualTokenReserves",
          "pool"
        ]
      },
      "WsEventPumpAmmTrade": {
        "type": "object",
        "properties": {
          "signature": { "type": "string" },
          "mint": { "type": "string" },
          "traderPublicKey": { "type": "string" },
          "txType": { "type": "string", "enum": ["buy", "sell"] },
          "tokenAmount": { "type": "number", "format": "double" },
          "solAmount": { "type": "number", "format": "double" },
          "poolBaseTokenReserves": { "type": "integer", "format": "int64" },
          "poolQuoteTokenReserves": { "type": "integer", "format": "int64" },
          "poolAccount": { "type": "string" },
          "pool": { "type": "string", "enum": ["pump-amm"] }
        },
        "required": [
          "signature",
          "mint",
          "traderPublicKey",
          "txType",
          "tokenAmount",
          "solAmount",
          "poolBaseTokenReserves",
          "poolQuoteTokenReserves",
          "poolAccount",
          "pool"
        ]
      },
      "WsEventPumpFunCreate": {
        "type": "object",
        "properties": {
          "signature": { "type": "string" },
          "mint": { "type": "string" },
          "creator": { "type": "string" },
          "txType": { "type": "string", "enum": ["create"] },
          "initialBuy": { "type": "number", "format": "double" },
          "solAmount": { "type": "number", "format": "double" },
          "bondingCurve": { "type": "string" },
          "name": { "type": "string" },
          "symbol": { "type": "string" },
          "uri": { "type": "string" },
          "pool": { "type": "string", "enum": ["pump"] }
        },
        "required": [
          "signature",
          "mint",
          "creator",
          "txType",
          "initialBuy",
          "solAmount",
          "bondingCurve",
          "name",
          "symbol",
          "uri",
          "pool"
        ]
      },
      "WsEventPumpFunMigrate": {
        "type": "object",
        "properties": {
          "signature": { "type": "string" },
          "txType": { "type": "string", "enum": ["migrate"] },
          "mint": { "type": "string" },
          "lp_mint": { "type": "string" },
          "poolAccount": { "type": "string" },
          "pool": { "type": "string", "enum": ["pump"] }
        },
        "required": [
          "signature",
          "txType",
          "mint",
          "lp_mint",
          "poolAccount",
          "pool"
        ]
      },
      "WsEvent": {
        "oneOf": [
          { "$ref": "#/components/schemas/WsEventPumpFunTrade" },
          { "$ref": "#/components/schemas/WsEventPumpAmmTrade" },
          { "$ref": "#/components/schemas/WsEventPumpFunCreate" },
          { "$ref": "#/components/schemas/WsEventPumpFunMigrate" }
        ],
        "description": "Server-sent event messages for trades, creates, and migrations."
      }
    }
  }
}